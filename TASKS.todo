[analyze-usage]:
  [function]:
    ✔ Mark non-local -use/assign @done(2015-07-24 23:43) @project([analyze-usage] / [function])
    ✔ Check non-local use/assign validity on call @done(2015-07-24 23:43) @project([analyze-usage] / [function])
    ✔ Parameters (**) @done(2015-07-29 10:51) @project([analyze-usage] / [function])
    ✔ Recursion (*) @done(2015-07-29 10:13) @project([analyze-usage] / [function])

  ☐ Loop
  ☐ Import


[analyze-type]:
  ☐ Scope crossing doesn't work for variable contextual deduce (***)
  ✔ CTA @done(2015-07-25 06:52) @project([analyze-type])
  ☐ type(..) expression (****)
  ☐ CTA for tuples


[check-type]:
  ☐ Assign (initializer and assign)
  ☐ Call (operand)
  ☐ Call (parameters)
  ☐ Cast (explicit)
  ☐ Return
  ☐ Select (condition)


[resolve]:
  ☐ Function
  ✔ Select @done(2015-07-25 06:52) @project([resolve])
  ✔ CTA @done(2015-07-25 06:52) @project([resolve])
  ☐ When CTA is applied to two compatible function types; merge the assign/use pools (*****)


[build]:
  [function]:
    ✔ Parameters @done(2015-07-29 10:51) @project([build] / [function])
    ✔ Return @done(2015-07-25 06:52) @project([build] / [function])

  ✔ Select @done(2015-07-25 07:21) @project([build])
  ☐ Cast each branch in a select expression (that has a value)
  ☐ Loop
  ☐ Import
  ☐ Unary
  ☐ Binary


[...]:
  ☐ Parameter (Unpack)

[error-checking]:
  ☐ Duplicate function names in same module (error)
  ☐ Duplicate exported slot names in same module (error)
  ☐ Attempting to unpack a non-tuple or a tuple of the wrong size (error)
  ☐ Use/Assign before declare (should error; segfaults currently)


language-arrow:
  ☐ Add underscores (`1_3_4`) to number patterns
  ☐ Add function parameters
  ☐ Make `;` optional

// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/PassManager.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/IRPrintingPasses.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("<stdin>", getGlobalContext());
 mod->setDataLayout("0xe0dca0");
 mod->setTargetTriple("x86_64-pc-linux-gnu");
 
 // Type Definitions
 std::vector<Type*>FuncTy_0_args;
 FuncTy_0_args.push_back(Type::getFloatTy(mod->getContext()));
 FunctionType* FuncTy_0 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 1),
  /*Params=*/FuncTy_0_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_1 = PointerType::get(Type::getFloatTy(mod->getContext()), 0);
 
 std::vector<Type*>FuncTy_2_args;
 FunctionType* FuncTy_2 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_2_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_3 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 PointerType* PointerTy_4 = PointerType::get(FuncTy_0, 0);
 
 
 // Function Declarations
 
 Function* func__Z3getf = mod->getFunction("_Z3getf");
 if (!func__Z3getf) {
 func__Z3getf = Function::Create(
  /*Type=*/FuncTy_0,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"_Z3getf", mod); 
 func__Z3getf->setCallingConv(CallingConv::C);
 }
 AttributeSet func__Z3getf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::ZExt);
    PAS = AttributeSet::get(mod->getContext(), 0U, B);
   }
  
  Attrs.push_back(PAS);
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func__Z3getf_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func__Z3getf->setAttributes(func__Z3getf_PAL);

Function* func_main = mod->getFunction("main");
if (!func_main) {
func_main = Function::Create(
 /*Type=*/FuncTy_2,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"main", mod); 
func_main->setCallingConv(CallingConv::C);
}
AttributeSet func_main_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_main_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_main->setAttributes(func_main_PAL);

// Global Variable Declarations


// Constant Definitions
ConstantInt* const_int32_5 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
ConstantInt* const_int1_6 = ConstantInt::get(mod->getContext(), APInt(1, StringRef("0"), 10));
ConstantInt* const_int32_7 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
ConstantFP* const_float_8 = ConstantFP::get(mod->getContext(), APFloat(3.200000e+01f));

// Global Variable Definitions

// Function Definitions

// Function: _Z3getf (func__Z3getf)
{
 Function::arg_iterator args = func__Z3getf->arg_begin();
 Value* float_v = args++;
 float_v->setName("v");
 
 BasicBlock* label_9 = BasicBlock::Create(mod->getContext(), "",func__Z3getf,0);
 
 // Block  (label_9)
 AllocaInst* ptr_10 = new AllocaInst(Type::getFloatTy(mod->getContext()), "", label_9);
 ptr_10->setAlignment(4);
 StoreInst* void_11 = new StoreInst(float_v, ptr_10, false, label_9);
 void_11->setAlignment(4);
 ReturnInst::Create(mod->getContext(), const_int1_6, label_9);
 
}

// Function: main (func_main)
{
 
 BasicBlock* label_13 = BasicBlock::Create(mod->getContext(), "",func_main,0);
 
 // Block  (label_13)
 AllocaInst* ptr_14 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_13);
 ptr_14->setAlignment(4);
 StoreInst* void_15 = new StoreInst(const_int32_7, ptr_14, false, label_13);
 CallInst* int1_16 = CallInst::Create(func__Z3getf, const_float_8, "", label_13);
 int1_16->setCallingConv(CallingConv::C);
 int1_16->setTailCall(false);
 AttributeSet int1_16_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::ZExt);
    PAS = AttributeSet::get(mod->getContext(), 0U, B);
   }
  
  Attrs.push_back(PAS);
  int1_16_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 int1_16->setAttributes(int1_16_PAL);
 
 CastInst* int32_17 = new ZExtInst(int1_16, IntegerType::get(mod->getContext(), 32), "", label_13);
 ReturnInst::Create(mod->getContext(), int32_17, label_13);
 
}

return mod;
}
